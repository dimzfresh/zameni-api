import { NestFactory } from '@nestjs/core';
import { ConfigService } from '@nestjs/config';
import { ValidationPipe } from '@nestjs/common';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { AppModule } from './app.module';
import { AllExceptionsFilter } from './common/filters/all-exceptions.filter';

async function bootstrap() {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏
  const app = await NestFactory.create(AppModule);
  
  const configService = app.get(ConfigService);
  const port = configService.get<number>('port') || 3000;
  const nodeEnv = configService.get<string>('nodeEnv') || 'development';
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
  const corsConfig = configService.get('cors');
  if (corsConfig) {
    app.enableCors(corsConfig);
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è production
  const securityConfig = configService.get('security');
  if (securityConfig?.trustProxy) {
    app.getHttpAdapter().getInstance().set('trust proxy', 1);
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç DDoS
  const rateLimitConfig = configService.get('rateLimit');
  if (rateLimitConfig) {
    // –í –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏–º @nestjs/throttler
    console.log(`üõ°Ô∏è Rate limiting: ${rateLimitConfig.max} requests per ${rateLimitConfig.windowMs}ms`);
  }
  
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
      validateCustomDecorators: true,
      transformOptions: {
        enableImplicitConversion: true,
      },
    }),
  );

  app.useGlobalFilters(new AllExceptionsFilter());
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Swagger
  const swaggerConfig = configService.get('swagger');
  if (swaggerConfig?.enabled) {
    const config = new DocumentBuilder()
      .setTitle('Zameni API')
      .setDescription('API –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏ –∑–∞–∫–∞–∑–æ–≤')
      .setVersion(swaggerConfig.version)
      .addTag('–ì–ª–∞–≤–Ω–∞—è', '–û—Å–Ω–æ–≤–Ω—ã–µ endpoints')
      .addTag('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
      .addTag('–ü—Ä–æ—Ñ–∏–ª—å', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      .addTag('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ)', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤')
      .addTag('–û—á–µ—Ä–µ–¥–∏ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ)', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –æ—á–µ—Ä–µ–¥–µ–π - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤')
      .addTag('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ)', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤')
      .addBearerAuth({
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
      }, 'JWT-auth')
      .build();

    const document = SwaggerModule.createDocument(app, config);
    
    SwaggerModule.setup('api', app, document, {
      swaggerOptions: {
        persistAuthorization: true,
        tagsSorter: 'alpha',
        operationsSorter: 'alpha',
      },
    });

    console.log(`üìö Swagger docs available at: http://localhost:${port}/api`);
  }
  
  await app.listen(port, '0.0.0.0'); // –°–ª—É—à–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
  console.log(`üöÄ Application is running on: http://localhost:${port} (${nodeEnv} mode)`);
  console.log(`‚ö° Multi-threading ready for concurrent requests`);
}
bootstrap();
