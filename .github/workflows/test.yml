name: Run Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - unit
        - integration
        - e2e
      coverage:
        description: 'Generate coverage report'
        required: false
        default: true
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: zameni_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test environment
      run: |
        # Create test environment file
        echo "NODE_ENV=test" > .env.test
        echo "DB_HOST=localhost" >> .env.test
        echo "DB_PORT=5432" >> .env.test
        echo "DB_DATABASE=zameni_test" >> .env.test
        echo "DB_USERNAME=postgres" >> .env.test
        echo "DB_PASSWORD=postgres" >> .env.test
        echo "JWT_SECRET=test-secret-key" >> .env.test
        echo "JWT_EXPIRES_IN=7d" >> .env.test
        echo "LOG_LEVEL=debug" >> .env.test
        echo "PORT=3000" >> .env.test
        
    - name: Wait for database
      run: |
        echo "‚è≥ Waiting for PostgreSQL to be ready..."
        timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "‚úÖ PostgreSQL is ready"
        
    - name: Setup database schema
      run: |
        echo "Setting up database schema..."
        # Create tables if they don't exist (basic setup)
        psql -h localhost -U postgres -d zameni_test -c "
          CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            email VARCHAR(255) UNIQUE NOT NULL,
            password VARCHAR(255) NOT NULL,
            name VARCHAR(255) NOT NULL,
            role VARCHAR(50) DEFAULT 'user',
            status VARCHAR(50) DEFAULT 'active',
            email_verified_at TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
        "
      env:
        PGPASSWORD: postgres
        
    - name: Run unit tests
      if: github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == null
      run: |
        if [ "${{ github.event.inputs.coverage }}" = "true" ] || [ "${{ github.event.inputs.coverage }}" = "" ]; then
          npm run test:cov
        else
          npm run test
        fi
      env:
        NODE_ENV: test
        
    - name: Run integration tests
      if: github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == null
      run: |
        echo "Running integration tests..."
        npm run test:e2e
      env:
        NODE_ENV: test
        
    - name: Run e2e tests
      if: github.event.inputs.test_type == 'e2e' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == null
      run: |
        echo "Running e2e tests..."
        npm run test:e2e
      env:
        NODE_ENV: test
        
    - name: Upload coverage to Codecov
      if: (github.event.inputs.coverage == 'true' || github.event.inputs.coverage == '') && (github.event.inputs.test_type == 'all' || github.event.inputs.test_type == null)
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          test-results/
        retention-days: 30
        
    - name: Notify test results
      uses: appleboy/telegram-action@master
      if: always() && github.event_name == 'workflow_dispatch'
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          üß™ Test Results
          
          üìä Repository: ${{ github.repository }}
          üîÑ Branch: ${{ github.ref_name }}
          üéØ Test Type: ${{ github.event.inputs.test_type || 'all' }}
          üìà Coverage: ${{ github.event.inputs.coverage || 'true' }}
          
          ‚úÖ Tests completed successfully!
          
          üìã View results: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
