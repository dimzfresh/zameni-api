{
  "name": "zameni-api",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "build": "nest build",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "nest start",
    "start:dev": "NODE_ENV=development nest start --watch",
    "start:debug": "NODE_ENV=development nest start --debug --watch",
    "start:prod": "NODE_ENV=production node dist/src/main",
    "start:staging": "NODE_ENV=staging node dist/src/main",
    "start:dev:env": "NODE_ENV=development nest start --watch --env-file .env.development",
    "start:staging:env": "NODE_ENV=staging node dist/main --env-file .env.staging",
    "start:prod:env": "NODE_ENV=production node dist/main --env-file .env.production",
    "build:dev": "NODE_ENV=development nest build",
    "build:staging": "NODE_ENV=staging nest build",
    "build:prod": "NODE_ENV=production nest build",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json",
    "db:up": "docker-compose up -d postgres",
    "db:down": "docker-compose down",
    "db:reset": "docker-compose down -v && docker-compose up -d postgres",
    "db:create:dev": "./scripts/database-setup.sh create development",
    "db:create:staging": "./scripts/database-setup.sh create staging",
    "db:create:prod": "./scripts/database-setup.sh create production",
    "db:drop:dev": "./scripts/database-setup.sh drop development",
    "db:drop:staging": "./scripts/database-setup.sh drop staging",
    "db:drop:prod": "./scripts/database-setup.sh drop production",
    "db:reset:dev": "./scripts/database-setup.sh reset development",
    "db:reset:staging": "./scripts/database-setup.sh reset staging",
    "db:reset:prod": "./scripts/database-setup.sh reset production",
    "db:list": "./scripts/database-setup.sh list",
    "test:api": "./scripts/test-api.sh",
    "test:concurrency": "./scripts/test-concurrency.sh",
    "kafka:up:dev": "docker-compose -f docker-compose.kafka.development.yml up -d",
    "kafka:down:dev": "docker-compose -f docker-compose.kafka.development.yml down",
    "kafka:reset:dev": "docker-compose -f docker-compose.kafka.development.yml down -v && docker-compose -f docker-compose.kafka.development.yml up -d",
    "kafka:logs:dev": "docker-compose -f docker-compose.kafka.development.yml logs -f",
    "kafka:up:staging": "docker-compose -f docker-compose.kafka.staging.yml up -d",
    "kafka:down:staging": "docker-compose -f docker-compose.kafka.staging.yml down",
    "kafka:reset:staging": "docker-compose -f docker-compose.kafka.staging.yml down -v && docker-compose -f docker-compose.kafka.staging.yml up -d",
    "kafka:logs:staging": "docker-compose -f docker-compose.kafka.staging.yml logs -f",
    "kafka:up:prod": "docker-compose -f docker-compose.kafka.production.yml up -d",
    "kafka:down:prod": "docker-compose -f docker-compose.kafka.production.yml down",
    "kafka:reset:prod": "docker-compose -f docker-compose.kafka.production.yml down -v && docker-compose -f docker-compose.kafka.production.yml up -d",
    "kafka:logs:prod": "docker-compose -f docker-compose.kafka.production.yml logs -f",
    "kafka:topics:dev": "docker exec kafka-dev kafka-topics --list --bootstrap-server localhost:9092",
    "kafka:topics:staging": "docker exec kafka-staging kafka-topics --list --bootstrap-server localhost:9093",
    "kafka:topics:prod": "docker exec kafka-prod kafka-topics --list --bootstrap-server localhost:9094",
    "kafka:create-topic:dev": "docker exec kafka-dev kafka-topics --create --topic",
    "kafka:create-topic:staging": "docker exec kafka-staging kafka-topics --create --topic",
    "kafka:create-topic:prod": "docker exec kafka-prod kafka-topics --create --topic",
    "kafka:producer:dev": "docker exec -it kafka-dev kafka-console-producer --topic",
    "kafka:producer:staging": "docker exec -it kafka-staging kafka-console-producer --topic",
    "kafka:producer:prod": "docker exec -it kafka-prod kafka-console-producer --topic",
    "kafka:consumer:dev": "docker exec -it kafka-dev kafka-console-consumer --topic",
    "kafka:consumer:staging": "docker exec -it kafka-staging kafka-console-consumer --topic",
    "kafka:consumer:prod": "docker exec -it kafka-prod kafka-console-consumer --topic",
    "config:dev": "echo 'Development config loaded' && NODE_ENV=development node -e \"console.log(JSON.stringify(require('./dist/src/config/configuration').default(), null, 2))\"",
    "config:staging": "echo 'Staging config loaded' && NODE_ENV=staging node -e \"console.log(JSON.stringify(require('./dist/src/config/configuration').default(), null, 2))\"",
    "config:prod": "echo 'Production config loaded' && NODE_ENV=production node -e \"console.log(JSON.stringify(require('./dist/src/config/configuration').default(), null, 2))\"",
    "create:admin": "ts-node scripts/create-admin.ts"
  },
  "dependencies": {
    "@nestjs/common": "^11.0.1",
    "@nestjs/config": "^4.0.2",
    "@nestjs/core": "^11.0.1",
    "@nestjs/event-emitter": "^3.0.1",
    "@nestjs/jwt": "^11.0.0",
    "@nestjs/passport": "^11.0.5",
    "@nestjs/platform-express": "^11.0.1",
    "@nestjs/schedule": "^4.1.2",
    "@nestjs/swagger": "^11.2.0",
    "@nestjs/typeorm": "^11.0.0",
    "bcryptjs": "^3.0.2",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.2",
    "passport": "^0.7.0",
    "passport-jwt": "^4.0.1",
    "passport-local": "^1.0.0",
    "pg": "^8.16.3",
    "reflect-metadata": "^0.2.2",
    "rxjs": "^7.8.1",
    "swagger-ui-express": "^5.0.1",
    "typeorm": "^0.3.25"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3.2.0",
    "@eslint/js": "^9.18.0",
    "@nestjs/cli": "^11.0.0",
    "@nestjs/schematics": "^11.0.0",
    "@nestjs/testing": "^11.0.1",
    "@types/bcryptjs": "^2.4.6",
    "@types/express": "^5.0.0",
    "@types/jest": "^30.0.0",
    "@types/node": "^22.10.7",
    "@types/passport-jwt": "^4.0.1",
    "@types/passport-local": "^1.0.38",
    "@types/pg": "^8.15.5",
    "@types/supertest": "^6.0.2",
    "eslint": "^9.18.0",
    "eslint-config-prettier": "^10.0.1",
    "eslint-plugin-prettier": "^5.2.2",
    "globals": "^16.0.0",
    "jest": "^30.0.0",
    "prettier": "^3.4.2",
    "source-map-support": "^0.5.21",
    "supertest": "^7.0.0",
    "ts-jest": "^29.2.5",
    "ts-loader": "^9.5.2",
    "ts-node": "^10.9.2",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.7.3",
    "typescript-eslint": "^8.20.0"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  }
}
